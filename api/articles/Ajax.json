{"title":"jQuery","uid":"a5b97ab8932b5f038d4330f012aa0a62","slug":"Ajax","date":"2021-08-12T11:23:15.000Z","updated":"2021-08-16T12:38:41.651Z","comments":true,"path":"api/articles/Ajax.json","keywords":null,"cover":null,"content":"<h1 id=\"Ajax简介\"><a href=\"#Ajax简介\" class=\"headerlink\" title=\"Ajax简介\"></a>Ajax简介</h1><p>Ajax全称为Asynchronous JavaScript And XML，就是异步的JS和XML。<br>通过Ajax可以在浏览器中向服务器发送异步请求，最大的优势:无刷新获取数据。</p>\n<h1 id=\"XML简介\"><a href=\"#XML简介\" class=\"headerlink\" title=\"XML简介\"></a>XML简介</h1><p>xML可扩展标记语言。<br>XMLT被设计用来传输和存储数据。<br>XML和 HTML类似，不同的是HTML中都是预定义标签，而XML中没有预定义标签，全都是自定义标签，用来表示一些数据。</p>\n<h1 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h1><p>HTTP(hypertext transport protocol)协议『超文本传输协议』﹐协议详细规定了浏览器和万维网服务器之间互相通信的规则。</p>\n<h2 id=\"请求报文\"><a href=\"#请求报文\" class=\"headerlink\" title=\"请求报文\"></a>请求报文</h2><h2 id=\"响应报文\"><a href=\"#响应报文\" class=\"headerlink\" title=\"响应报文\"></a>响应报文</h2><h1 id=\"jQuery\"><a href=\"#jQuery\" class=\"headerlink\" title=\"jQuery\"></a>jQuery</h1><p>Jquery是JS库，存放用JS写的函数，简化代码</p>\n<p>自定义的功能代码</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$(document).ready(function()&#123;\n    alert(&quot;wwj&quot;)\n&#125;)</code></pre>\n<p>快捷方式</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$(function()&#123;\n    alert(111);\n&#125;)</code></pre>\n\n<h2 id=\"dom对象和jQuery对象\"><a href=\"#dom对象和jQuery对象\" class=\"headerlink\" title=\"dom对象和jQuery对象\"></a>dom对象和jQuery对象</h2><ul>\n<li>dom对象：使用JS语法表示的对象，也就是JS对象<br><code>var obj = document,getElementById(&quot;id&quot;)</code></li>\n<li>jQuery对象：使用jquery语法表示的对象,都是数组<br><code>var jobj = $(&quot;#id&quot;)</code></li>\n<li>dom对象转为jQuery：$(dom对象)</li>\n<li>jQuery转为dom对象：从数组中获取第一个对象，使用[0]或get(0)</li>\n</ul>\n<h2 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h2><ul>\n<li>id选择器 <code>$(&quot;#id&quot;)</code></li>\n<li>class选择器 <code>$(&quot;.class&quot;)</code></li>\n<li>标签选择器<code>$(&quot;标签名&quot;)</code></li>\n<li>所有选择器<code>$(&quot;*&quot;)</code></li>\n<li>组合选择器<code>$(&quot;id选择器,class选择器,标签选择器&quot;)</code></li>\n</ul>\n<h2 id=\"表单选择器，\"><a href=\"#表单选择器，\" class=\"headerlink\" title=\"表单选择器，\"></a>表单选择器，</h2><ul>\n<li>使用<input>标签的type属性值,定位dom对象的方式。`$ (“:type属性值”)</li>\n<li>例如:$(“:text”) ,选择的是所有的单行文本框，<br>$(“:button” ) ，选择的是所有的按钮。</li>\n</ul>\n<h2 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h2><ul>\n<li>在定位了dom对象后，根据一些条件筛选dom对象<br>  <code>$(&quot;选择器:first&quot;)</code>数组中的第一个dom对象<br>  <code>$(&quot;选择器:last&quot;)</code>数组中的最后一个dom对象<br>  <code>$(&quot;选择器:eq (数组的下标)&quot;)</code>获取指定下标的dom对象<br>  <code>$ &quot;选择器:lt(下标) &quot;)</code>获取小于下标的所有dom对象<br>  <code>$(&quot;选择器:gt(下标)&quot;) </code>获取大于卞标的所有dom对象</li>\n<li>表单属性过滤器:根据表单中don对象的状态情况，定位dom对象的。<br>  启用状态enabled<br>  在可用状态disabled<br>  选择状态checked ,例如radio,checkbox<br>  选择可用的文本框<code>$(&quot;:text:enabled&quot;)</code><br>  选择不可用的文本框<code>$(&quot;:text:disabled&quot;)</code><br>  复选框选中的元素<code>$(&quot;:checkbox:checked&quot;)</code><br>  选择下拉列表中的被选中值<code>选择器&gt;option:selected</code></li>\n</ul>\n<h2 id=\"绑定事件\"><a href=\"#绑定事件\" class=\"headerlink\" title=\"绑定事件\"></a>绑定事件</h2><p>$(选择器).事件名称(事件处理函数)<br><code>$(&quot;#id&quot;).click(function()&#123;&#125;)</code></p>\n<p>on绑定事件</p>\n<ul>\n<li>$选择器).on(事件名称，事件的处理函数)<br><code>$(&quot;#btn&quot;).on(&quot;click&quot;,function() &#123;&#125;)</code></li>\n</ul>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h3 id=\"val\"><a href=\"#val\" class=\"headerlink\" title=\"val\"></a>val</h3><ul>\n<li>操作数组中DOM对象的value属性.</li>\n<li>$(选择器).val():无参数调用形式，读取数组中第一个DOM对象的value属性值</li>\n<li>$(选择器).val(值):有参形式调用;对数组中所有DOM对象的value属性值进行统一赋值</li>\n</ul>\n<h3 id=\"text\"><a href=\"#text\" class=\"headerlink\" title=\"text\"></a>text</h3><ul>\n<li>操作数组中所有DOM对象的文字显示内容属性</li>\n<li>$(选择器).text():无参数调用，读取数组中所有DOM对象的文字显示内容，将得到内容拼接为一个字符串返回</li>\n<li>$(选择器).text(值):有参数方式，对数组中所有DOM对象的文字显示内容进行统一赋值</li>\n</ul>\n<h3 id=\"attr\"><a href=\"#attr\" class=\"headerlink\" title=\"attr\"></a>attr</h3><ul>\n<li>对val, text之外的其他属性操作</li>\n<li>$(选择器).attr(“属性名”):获取DOM数组第一个对象的属性值</li>\n<li>$(选择器).attr(“属性名”,“值”):对数组中所有DOM对象的属性设为新值</li>\n</ul>\n<h3 id=\"remove\"><a href=\"#remove\" class=\"headerlink\" title=\"remove\"></a>remove</h3><p>$(选择器).remove():将数组中所有DOM对象及其子对象一并删除</p>\n<h3 id=\"empty\"><a href=\"#empty\" class=\"headerlink\" title=\"empty\"></a>empty</h3><ul>\n<li>$(选择器).empty():将数组中所有DOM对象的子对象删除</li>\n</ul>\n<h3 id=\"append\"><a href=\"#append\" class=\"headerlink\" title=\"append\"></a>append</h3><p>为数组中所有DOM对象添加子对象<br>$(选择器).append(“<div>动态添加</div>“)</p>\n<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><ul>\n<li>设置或返回被选元素的内容( innerHTML)。</li>\n<li>$(选择器).html():无参数调用方法，获取DOM数组第一个匹元素的内容。</li>\n<li>$(选择器).html(值):有参数调用，用于设置DOM数组中所有元素的内容。</li>\n</ul>\n<h3 id=\"each\"><a href=\"#each\" class=\"headerlink\" title=\"each\"></a>each</h3><ul>\n<li>each是对数组，json和 dom数组等的遍历,对每个元素调用一次函数。</li>\n<li>语法1: $.each(要遍历的对象, function(index,element){处理程序})</li>\n<li>语法2: jQuery对象.each( function( index, element ){处理程序})</li>\n</ul>\n<h3 id=\"ajax\"><a href=\"#ajax\" class=\"headerlink\" title=\"ajax\"></a>ajax</h3><ul>\n<li><p>$.ajax()</p>\n</li>\n<li><p>$post()︰使用post方式做ajax请求。</p>\n</li>\n<li><p>$ajax() : jquery中实现ajax的核心函数</p>\n</li>\n<li><p>$.get() :使用get方式发送ajax请求。</p>\n</li>\n<li><p>$.post()和$.get()他们在内部都是调用的$.ajax ( )</p>\n</li>\n<li><p>$.ajax函数的使用，函数的参数表示请求的url，请求的方式，参数值等信息</p>\n</li>\n<li><p>$.ajax参数是一个json的结构。<br>例如:<code>$ .ajax(&#123;名称:值,名称1:值1..... &#125; )</code><br>例如: <code>$.ajax(&#123; async:true , contentType : &quot;application/json&quot;,data: &#123;name:&quot;list&quot;,age:&quot;20&quot;&#125;, dataType:&quot;json&quot;), error:function()&#123;&#125;</code><br>json结构的参教说明:<br>1 async:是一个boolean类型的值，默认是true ，表示异步请求的。可以不写async这个配置项<br>xmlHttp.open (get,url ,true)，第三个参数一样的意思。<br>2 contentType:一个字符串，表示从浏览器发送服务器的参数的类型。可以不写。<br>例如你想表示请求的参数是json格式的,可以写application/jsonI<br>3 data:可以是字符串，数组，json，表示请求的参数和参数值。<br>4 dataType:表示期望从服务器端返回的数据格式(xml,html,text,json)<br>5 error:一个function ,表示当请求发生错误时，执行的函数。<br>6 sucess:一个function ,请求成功了，从服务器返回了数据，执行sucess函数<br>7 url:请求的地址<br>8 type:请求方式,get或者post,不用区分大小写</p>\n</li>\n</ul>\n","feature":true,"text":"Ajax简介Ajax全称为Asynchronous JavaScript And XML，就是异步的JS和XML。通过Ajax可以在浏览器中向服务器发送异步请求，最大的优势:无刷新获取数据。 XML简介xML可扩展标记语言。XMLT被设计用来传输和存储数据。XML和 HTML类似...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Ajax%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">Ajax简介</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#XML%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">XML简介</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#HTTP\"><span class=\"toc-text\">HTTP</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87\"><span class=\"toc-text\">请求报文</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87\"><span class=\"toc-text\">响应报文</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#jQuery\"><span class=\"toc-text\">jQuery</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#dom%E5%AF%B9%E8%B1%A1%E5%92%8CjQuery%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">dom对象和jQuery对象</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%89%E6%8B%A9%E5%99%A8\"><span class=\"toc-text\">选择器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E5%8D%95%E9%80%89%E6%8B%A9%E5%99%A8%EF%BC%8C\"><span class=\"toc-text\">表单选择器，</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%87%E6%BB%A4%E5%99%A8\"><span class=\"toc-text\">过滤器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">绑定事件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#val\"><span class=\"toc-text\">val</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#text\"><span class=\"toc-text\">text</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#attr\"><span class=\"toc-text\">attr</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#remove\"><span class=\"toc-text\">remove</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#empty\"><span class=\"toc-text\">empty</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#append\"><span class=\"toc-text\">append</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#html\"><span class=\"toc-text\">html</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#each\"><span class=\"toc-text\">each</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ajax\"><span class=\"toc-text\">ajax</span></a></li></ol></li></ol></li></ol>","author":{"name":"no clean bowl","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"小白不摸鱼","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"github","uid":"edba0911ce1cb2f14024ceee438ad7ac","slug":"github","date":"2021-09-03T06:49:19.000Z","updated":"2021-09-03T07:24:10.041Z","comments":true,"path":"api/articles/github.json","keywords":null,"cover":null,"text":"使用GitHub目的借助GitHub托管项目代码 基本概念 仓库（repository） 用来存放项目代码，每个项目对应一个仓库 收藏（star） 收藏项目，方便下次查看 复制克隆项目（fork） 该fork项目独立存在 发起请求（pull request） 合并代码 关注（wa...","link":"","photos":[],"count_time":{"symbolsCount":645,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"no clean bowl","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"小白不摸鱼","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"GitHub访问和下载限制","uid":"4e80388c598e859e00e4ef7f065d1fc0","slug":"访问GitHub","date":"2021-08-04T00:13:30.000Z","updated":"2021-08-07T09:59:22.689Z","comments":true,"path":"api/articles/访问GitHub.json","keywords":null,"cover":[],"text":"情景 由于GitHub是一个国外的网站，访问经常会受到限制。访问速度和下载速度都非常慢 该博客是为了解决GitHub的访问和下载速度问题。 访问解决原理 hosts 文件是存放在电脑本地的域名解析文件，这是浏览器在访问各种网站时可能会用到的文件。 我们访问网站的时候，本质上访问的...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"no clean bowl","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"小白不摸鱼","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}